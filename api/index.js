// Importa o mÃ³dulo 'express', que Ã© o framework web que vamos usar para criar nosso servidor.
const express = require("express");

// Importa o mÃ³dulo 'dotenv'. Ele nos permite carregar variÃ¡veis de ambiente
// de um arquivo .env para o objeto process.env. Isso Ã© crucial para dados sensÃ­veis.
require("dotenv").config();

// Importa o mÃ³dulo 'cors'. Ele lida com a polÃ­tica de seguranÃ§a de "RequisiÃ§Ãµes entre Origens".
// Basicamente, permite que um site (seu futuro React) em um endereÃ§o diferente
// possa se comunicar com esta API sem ser bloqueado pelo navegador.
const cors = require("cors");

// Cria uma instÃ¢ncia do aplicativo Express. Ã‰ o nosso "servidor" em si.
const app = express();

// Define a porta em que o servidor irÃ¡ rodar.
// Primeiro, ele tenta pegar a porta da variÃ¡vel de ambiente PORT (muito comum em ambientes de produÃ§Ã£o).
// Se nÃ£o encontrar (o que acontece em desenvolvimento), ele usa a porta 3000 como padrÃ£o.
const PORT = process.env.PORT || 3000;

// --- ConfiguraÃ§Ã£o de Middlewares ---
// Middlewares sÃ£o funÃ§Ãµes que o Express executa sequencialmente em cada requisiÃ§Ã£o recebida.

// Usa o middleware 'cors' para habilitar o CORS para todas as requisiÃ§Ãµes.
// Por enquanto, ele permite qualquer origem (*), mas em produÃ§Ã£o, Ã© bom ser mais especÃ­fico.
app.use(cors());

// Usa o middleware 'express.json()'. Isso Ã© vital!
// Ele faz com que o Express entenda e parseie (converta) o corpo de requisiÃ§Ãµes
// que vÃªm em formato JSON (por exemplo, quando o frontend envia dados para o backend).
// Sem isso, req.body viria como 'undefined'.
app.use(express.json());

// --- DefiniÃ§Ã£o de Rotas (Endpoints da API) ---
// Rotas definem como nosso servidor responde a diferentes tipos de requisiÃ§Ãµes HTTP (GET, POST, etc.)
// em diferentes URLs (endpoints).

// Rota Raiz (GET /)
// Quando alguÃ©m faz uma requisiÃ§Ã£o GET para o endereÃ§o base do servidor (ex: http://localhost:3000/),
// esta funÃ§Ã£o Ã© executada. 'req' Ã© o objeto de requisiÃ§Ã£o, 'res' Ã© o objeto de resposta.
app.get("/", (req, res) => {
  res.send("API GitPes estÃ¡ rodando! ðŸš€ Bem-vindo!"); // Envia uma mensagem simples como resposta.
});

// Rota de Teste (GET /teste)
// Ãštil para verificar rapidamente se o servidor estÃ¡ funcionando e respondendo JSON.
// Ex: http://localhost:3000/teste
app.get("/teste", (req, res) => {
  res.json({
    message: "Esta Ã© uma rota de teste da API GitPes!",
    status: "OK",
  }); // Envia um JSON.
});

// --- InicializaÃ§Ã£o do Servidor ---
// Faz o aplicativo Express comeÃ§ar a "escutar" por requisiÃ§Ãµes na porta especificada.
app.listen(PORT, () => {
  console.log(`Servidor Express rodando em: http://localhost:${PORT}`);
  console.log("Para parar, pressione Ctrl+C.");
});
